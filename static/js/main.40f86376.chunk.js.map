{"version":3,"sources":["components/List.js","components/FilteredList.js","components/RedditList.js","components/DisplayUptime.js","components/ListWithButton.js","components/Unread.js","components/Read.js","components/Form.js","components/Title.js","components/MySavedTitles.js","titles.js","App.js","serviceWorker.js","index.js"],"names":["List","props","url","post","data","title","replaceAmpersand","indexOf","replace","react_default","a","createElement","className","href","FilteredList","filteredData","map","components_List","key","id","RedditList","redditData","DisplayUptime","state","uptime","displayTime","updateUptime","_this","setState","prevState","setDateAndTime","time","secondsWord","seconds","minutesWord","minutes","parseInt","hoursWord","hours","daysWord","days","concat","setInterval","this","React","Component","ListWithButton","onClick","handleClick","value","Unread","unread","components_ListWithButton","Read","clearLocalStorage","read","Form","inputValue","onInputChange","e","target","onSubmit","preventDefault","localStorage","getItem","profile","split","push","setItem","updateLocalFilterData","placeholder","onChange","Title","removeFromLocalStorage","MySavedTitles","arr","Array","from","mangaList","components_Form","item","components_Title","mangaTitles","App","filter","intervalId","localFilterData","grabRedditData","filterFunction","fetch","then","res","json","dataObject","children","_","console","log","filterMangaTitle","filterList","filteringReddit","result","forEach","includes","filteringFilteredReddit","checkIfAlreadyInRead","removeTitleFromFilterList","removeTitleFromReadList","removeItem","markRead","unclicked","clicked","length","readVar","shift","Object","toConsumableArray","filteredObjectData","readIds","toggleAutoRefresh","checked","clearInterval","JSON","parse","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","stringify","_this2","components_DisplayUptime","type","name","htmlFor","components_MySavedTitles","components_Unread","components_Read","components_FilteredList","components_RedditList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40f86376.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst List = props => {\r\n  let url = props.post.data.url;\r\n  let title = props.post.data.title;\r\n\r\n  const replaceAmpersand = url => {\r\n    if (url.indexOf(\"&\") > 1) {\r\n      url = url.replace(\"&amp;\", \"&\");\r\n    }\r\n\r\n    return url;\r\n  };\r\n\r\n  url = replaceAmpersand(url);\r\n  title = replaceAmpersand(title);\r\n\r\n  return (\r\n    <div className=\"titles\">\r\n      {title}\r\n      <button>\r\n        <a href={url}>Link</a>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport List from \"./List\";\r\n\r\nconst FilteredList = props => {\r\n  return (\r\n    <div className=\"filtered-list\">\r\n      <h3>Filtered</h3>\r\n      {props.filteredData.map(post => (\r\n        <List post={post} key={post.data.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilteredList;\r\n","import React from \"react\";\r\nimport List from \"./List\";\r\n\r\nconst RedditList = props => {\r\n  return (\r\n    <div className=\"reddit-list\">\r\n      <h3>Not filtered</h3>\r\n      {props.redditData.map(post => (\r\n        <List post={post} key={post.data.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RedditList;\r\n","import React from \"react\";\r\n\r\nclass DisplayUptime extends React.Component {\r\n  state = {\r\n    uptime: 0,\r\n    displayTime: \"0 days, 0 hours, 0 minutes, 0 seconds\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    setInterval(this.updateUptime, 1000);\r\n  }\r\n\r\n  updateUptime = () => {\r\n    this.setState(prevState => ({ uptime: prevState.uptime + 1 }));\r\n    this.setState(prevState => ({\r\n      displayTime: this.setDateAndTime(prevState.uptime)\r\n    }));\r\n  };\r\n\r\n  setDateAndTime = time => {\r\n    let seconds = time % 60,\r\n      secondsWord;\r\n    seconds > 1 || seconds === 0\r\n      ? (secondsWord = \"seconds\")\r\n      : (secondsWord = \"second\");\r\n\r\n    let minutes = parseInt((time / 60) % 60),\r\n      minutesWord;\r\n    minutes > 1 || minutes === 0\r\n      ? (minutesWord = \"minutes\")\r\n      : (minutesWord = \"minute\");\r\n\r\n    let hours = parseInt((time / 60 / 60) % 24),\r\n      hoursWord;\r\n    hours > 1 || hours === 0 ? (hoursWord = \"hours\") : (hoursWord = \"hour\");\r\n\r\n    let days = parseInt(time / 60 / 60 / 24),\r\n      daysWord;\r\n    days > 1 || days === 0 ? (daysWord = \"days\") : (daysWord = \"day\");\r\n\r\n    return `${days} ${daysWord}, ${hours} ${hoursWord}, ${minutes} ${minutesWord} and ${seconds} ${secondsWord}`;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Current Uptime: {this.state.displayTime}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayUptime;\r\n","import React from \"react\";\r\n\r\nconst ListWithButton = props => {\r\n  let url = props.post.data.url;\r\n  if (url.indexOf(\"&\") > 1) {\r\n    url = url.replace(\"&amp;\", \"&\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"titles\">\r\n      {props.post.data.title}\r\n      <button>\r\n        <a href={url}>Link</a>\r\n      </button>\r\n      <button onClick={props.handleClick} value={props.post.data.id}>\r\n        x\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListWithButton;\r\n","import React from \"react\";\r\nimport ListWithButton from \"./ListWithButton\";\r\n\r\nconst Unread = props => {\r\n  return (\r\n    <div>\r\n      <h3>Unread</h3>\r\n      {props.unread.map(post => (\r\n        <ListWithButton\r\n          post={post}\r\n          key={post.data.id}\r\n          handleClick={props.handleClick}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Unread;\r\n","import React from \"react\";\r\nimport List from \"./List\";\r\n\r\nconst Read = props => {\r\n  return (\r\n    <div>\r\n      <h3>\r\n        History of Titles Marked Read\r\n        <button onClick={props.clearLocalStorage}>Clear</button>\r\n      </h3>\r\n\r\n      {props.read.map(post => (\r\n        <List post={post} key={post.data.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Read;\r\n","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    inputValue: \"\"\r\n  };\r\n\r\n  onInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    if (!localStorage.getItem(\"titles\")) {\r\n      localStorage.setItem(\"titles\", [this.state.inputValue]);\r\n    } else {\r\n      let profile = localStorage.getItem(\"titles\").split(\",\");\r\n      profile.push(this.state.inputValue);\r\n      localStorage.setItem(\"titles\", profile);\r\n    }\r\n    this.setState({ inputValue: \"\" });\r\n    this.props.updateLocalFilterData();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <input\r\n          placeholder=\"save your manga titles\"\r\n          onChange={this.onInputChange}\r\n          value={this.state.inputValue}\r\n        />\r\n        <button>add</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Title = props => {\r\n  return (\r\n    <div className=\"titles\">\r\n      {props.title}\r\n      <button onClick={() => props.removeFromLocalStorage(props.title)}>\r\n        x\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport Title from \"./Title\";\r\n\r\nconst MySavedTitles = props => {\r\n  let arr = Array.from(props.mangaList);\r\n  return (\r\n    <div className=\"my-saved-titles\">\r\n      <h3>My Saved Titles</h3>\r\n      <Form updateLocalFilterData={props.updateLocalFilterData} />\r\n      {arr.map(item => (\r\n        <Title\r\n          title={item}\r\n          key={item}\r\n          removeFromLocalStorage={props.removeFromLocalStorage}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MySavedTitles;\r\n","const mangaTitles = [\r\n  \"UnOrdinary\",\r\n  \"Shingeki no Kyojin\",\r\n  \"Solo Leveling\",\r\n  \"Shokugeki no Souma\",\r\n  \"Haikyuu\",\r\n  \"My Hero Academia\",\r\n  \"one piece\",\r\n  \"dr. stone\",\r\n  \"the promised neverland\",\r\n  \"burning effect\",\r\n  \"black clover\",\r\n  \"beautiful legends\",\r\n  \"samurai 8\",\r\n  \"The God of High School\",\r\n  \"The Gamer\",\r\n  \"peerless dad\",\r\n  \"fight class 3\",\r\n  \"spy x family\",\r\n  \"gokushufudou\",\r\n  \"chainsawman\",\r\n  \"The Scholar's Reincarnation\",\r\n  \"Tate no Yuusha no Nariagari\",\r\n  \"To You, The Immortal\",\r\n  \"Tower of God\",\r\n  \"Akagami no Shirayukihime\",\r\n  \"A Returner’s Magic Should be Special\",\r\n  \"Baby Steps\",\r\n  \"Jujutsu Kaisen\",\r\n  \"The Wrong Way to use Healing Magic\",\r\n  \"Act-Age\",\r\n  \"Dad is a Hero, Mom is a Spirit, I'm a Reincarnator\",\r\n  \"Heart Gear\",\r\n  \"Isekai de Tadahitori No Manono Tsukai ~ Tenshoku Shitara Maou ni Machigawa Remashita\",\r\n  \"Tensei Shitara Slime Datta Ken\",\r\n  \"Chainsaw Man\",\r\n  \"Demon Slayer: Kimetsu no Yaiba\",\r\n  \"One-Punch Man\"\r\n];\r\n\r\nexport default mangaTitles;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport FilteredList from \"./components/FilteredList\";\nimport RedditList from \"./components/RedditList\";\nimport DisplayUptime from \"./components/DisplayUptime\";\nimport Unread from \"./components/Unread\";\nimport Read from \"./components/Read\";\nimport MySavedTitles from \"./components/MySavedTitles\";\n\nimport mangaTitles from \"./titles\";\n\nclass App extends React.Component {\n  state = {\n    redditData: [],\n    filter: mangaTitles,\n    filteredData: [],\n    unread: [],\n    read: [],\n    intervalId: \"\",\n    localFilterData: []\n  };\n\n  componentDidMount() {\n    this.grabRedditData(this.filterMangaTitle);\n    this.setState(prevState => ({\n      localFilterData: localStorage.getItem(\"titles\").split(\",\")\n    }));\n\n    if (JSON.parse(localStorage.getItem(\"unread\"))) {\n      this.setState(prevState => ({\n        unread: JSON.parse(localStorage.getItem(\"unread\"))\n      }));\n    }\n    if (JSON.parse(localStorage.getItem(\"read\"))) {\n      this.setState(prevState => ({\n        read: JSON.parse(localStorage.getItem(\"read\"))\n      }));\n    }\n\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    this.saveStateToLocalStorage();\n  }\n\n  saveStateToLocalStorage() {\n    localStorage.setItem(\"titles\", this.state.localFilterData);\n    localStorage.setItem(\"unread\", JSON.stringify(this.state.unread));\n    localStorage.setItem(\"read\", JSON.stringify(this.state.read));\n  }\n\n  grabRedditData = filterFunction => {\n    fetch(\"https://www.reddit.com/r/manga.json\")\n      .then(res => res.json())\n      .then(dataObject =>\n        this.setState({\n          redditData: dataObject.data.children\n        })\n      )\n      .then(_ => filterFunction(this.state.localFilterData));\n    console.log(\"fetching new reddit list\");\n  };\n  // can improve filter by making fuzzy filtering (like fuzzy searches)\n  filterMangaTitle = filterList => {\n    let filteringReddit = this.state.redditData.filter(post => {\n      let result = false;\n      filterList.forEach(title => {\n        if (post.data.title.includes(title)) result = true;\n      });\n      return result;\n    });\n    let filteringFilteredReddit = this.checkIfAlreadyInRead(\n      filteringReddit,\n      this.state.read\n    );\n\n    this.setState(prevState => ({ filteredData: filteringReddit }));\n    this.setState(prevState => ({ unread: filteringFilteredReddit }));\n  };\n  updateLocalFilterData = () => {\n    let filteredData = localStorage.getItem(\"titles\").split(\",\");\n    this.setState(prevState => ({\n      localFilterData: filteredData\n    }));\n    this.filterMangaTitle(filteredData);\n  };\n  // doesn't remove title from saved data - bug\n  removeFromLocalStorage = title => {\n    let removeTitleFromFilterList = this.state.localFilterData.filter(\n      e => e !== title\n    );\n    let removeTitleFromReadList = this.state.read.filter(e => e !== title);\n    this.setState(prevState => ({\n      localFilterData: removeTitleFromFilterList\n    }));\n    this.setState(prevState => ({\n      read: removeTitleFromReadList\n    }));\n    localStorage.setItem(\"titles\", removeTitleFromFilterList);\n    this.filterMangaTitle(removeTitleFromFilterList);\n  };\n  clearLocalStorage = e => {\n    localStorage.removeItem(\"read\");\n    this.setState({ read: [] });\n  };\n\n  markRead = e => {\n    let unclicked = this.state.unread.filter(\n      item => item.data.id !== e.target.value\n    );\n    let clicked = this.state.unread.filter(\n      item => item.data.id === e.target.value\n    );\n\n    this.setState(prevState => ({ unread: unclicked }));\n\n    if (this.state.read.length > 8) {\n      let readVar = this.state.read;\n      readVar.shift();\n      this.setState(prevState => ({ read: [...readVar, clicked[0]] }));\n    } else {\n      this.setState(prevState => ({ read: [...prevState.read, clicked[0]] }));\n    }\n  };\n  checkIfAlreadyInRead = (filteredObjectData, read) => {\n    let readIds = read.map(title => title.data.id);\n    let result = [];\n    let combinedArrays = filteredObjectData.concat(read);\n\n    combinedArrays.forEach(item => {\n      if (!readIds.includes(item.data.id)) {\n        result.push(item);\n        readIds.push(item.data.id);\n      }\n    });\n\n    return result;\n  };\n\n  toggleAutoRefresh = e => {\n    let checked = e.target.checked;\n    let intervalId;\n    const startRefresh = () => {\n      intervalId = setInterval(\n        () => this.grabRedditData(this.filterMangaTitle),\n        60000\n      );\n      this.setState(() => ({ intervalId: intervalId }));\n    };\n\n    const stopRefresh = () => {\n      clearInterval(this.state.intervalId);\n    };\n\n    checked ? startRefresh() : stopRefresh();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"uptime\">\n          <DisplayUptime />\n          <button onClick={() => this.grabRedditData(this.filterMangaTitle)}>\n            REFRESH REDDIT LIST\n          </button>\n          <div>\n            <input\n              type=\"checkbox\"\n              name=\"autorefresh\"\n              onClick={this.toggleAutoRefresh}\n            />\n            <label htmlFor=\"autorefresh\">Toggle Auto-Refresh</label>\n          </div>\n        </div>\n        <div className=\"list\">\n          <MySavedTitles\n            mangaList={this.state.localFilterData}\n            updateLocalFilterData={this.updateLocalFilterData}\n            removeFromLocalStorage={this.removeFromLocalStorage}\n          />\n          <div className=\"read-unread\">\n            <Unread unread={this.state.unread} handleClick={this.markRead} />\n            <Read\n              read={this.state.read}\n              clearLocalStorage={this.clearLocalStorage}\n            />\n          </div>\n          <FilteredList filteredData={this.state.filteredData} />\n          <RedditList redditData={this.state.redditData} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}